import random
import hashlib
import base58
from ecdsa import SigningKey, SECP256k1

# Função para gerar a chave pública a partir de uma chave privada
def get_public_key_from_private(private_key, curve=SECP256k1, compressed=True):
    sk = SigningKey.from_secret_exponent(private_key, curve=curve)
    vk = sk.get_verifying_key()
    if compressed:
        return vk.to_string("compressed")
    else:
        return vk.to_string("uncompressed")

# Função para converter uma chave pública em um endereço Bitcoin
def public_key_to_address(public_key, testnet=False):
    # Passo 1: SHA-256
    sha256_hash = hashlib.sha256(public_key).digest()
    
    # Passo 2: RIPEMD-160
    ripemd160 = hashlib.new('ripemd160')
    ripemd160.update(sha256_hash)
    hashed_public_key = ripemd160.digest()
    
    # Passo 3: Prefixo da Rede (0x00 para mainnet, 0x6F para testnet)
    prefix = b'\x6f' if testnet else b'\x00'
    hashed_public_key_with_prefix = prefix + hashed_public_key
    
    # Passo 4: SHA-256 duas vezes para Checksum
    checksum = hashlib.sha256(hashlib.sha256(hashed_public_key_with_prefix).digest()).digest()[:4]
    
    # Passo 5: Adicionar Checksum
    binary_address = hashed_public_key_with_prefix + checksum
    
    # Passo 6: Converter para Base58
    address = base58.b58encode(binary_address).decode('utf-8')
    
    return address

# Função para buscar a chave privada via força bruta com passo aleatório
def brute_force_private_key(target_address, min_hex, max_hex, step_range=(1, 100), compressed=True, testnet=False):
    # Converter valores hexadecimais para inteiros
    min_value = int(min_hex, 16)
    max_value = int(max_hex, 16)
    
    # Definir a ordem do grupo para a curva SECP256k1
    curve_order = SECP256k1.order
    
    # Validar intervalo
    if min_value < 1 or max_value >= curve_order or min_value > max_value:
        raise ValueError("Intervalo de chaves privadas inválido.")
    
    attempt = 0
    private_key = min_value
    while private_key <= max_value:
        # Gere a chave pública correspondente
        public_key = get_public_key_from_private(private_key, compressed=compressed)
        
        # Converta a chave pública em um endereço Bitcoin
        generated_address = public_key_to_address(public_key, testnet=testnet)
        
        # Mostre a chave privada e o endereço gerados
        attempt += 1
        print(f"Attempt {attempt}: Private Key = {hex(private_key)}, Address = {generated_address}")
        
        # Compare com o endereço alvo
        if generated_address == target_address:
            return private_key  # Chave privada encontrada
        
        # Gera um passo aleatório dentro do intervalo especificado
        step = random.randint(*step_range)
        #print(f"Passo aleatório utilizado: {step}")  # Mostra o passo aleatório
        private_key += step

    return None  # Caso chegue ao fim do intervalo sem encontrar a chave

# Parâmetros de configuração para o puzzle 67
min_hex = "0x0000000000000000000000000000000000000000000000040000000000000000"  # Valor hexadecimal mínimo
max_hex = "0x000000000000000000000000000000000000000000000007FFFFFFFFFFFFFFFF"  # Valor hexadecimal máximo

# Endereço Bitcoin alvo
target_address = "1BY8GQbnueYofwSuFAT3USAhGjPrkxDdW9"

# Tentar encontrar a chave privada com passos aleatórios
found_private_key = brute_force_private_key(target_address, min_hex, max_hex, step_range=(1, 100), compressed=True)

if found_private_key is not None:
    print(f"Chave privada encontrada: {hex(found_private_key)}")
else:
    print("Chave privada não encontrada.")